use "gfx";

var WIDTH = 800;
var HEIGHT = 600;

var BALL_WIDTH = 20;
var BALL_HEIGHT = 20;

var PADDLE_HEIGHT = 60;
var PADDLE_WIDTH  = 30;

var PADDLE_SPEED = 4;

var left_points = 0;
var right_points = 0;
var SCORE_TO_WIN = 3;

func make_paddle(left) {
	var paddle = { 
		update = paddle_update,
		draw = paddle_draw,
		move = paddle_move,
	};
	paddle.y = HEIGHT/2 - PADDLE_HEIGHT/2;
	if left {
		paddle.left = true;
		paddle.x = 20;
	} else {
		paddle.left = false;
		paddle.x = WIDTH-20-PADDLE_WIDTH;
	}
	
	return paddle;
}

func paddle_draw(self) {
	gfx.fill_rect(self.x, self.y, PADDLE_WIDTH, PADDLE_HEIGHT, 255, 255, 255);
}

func paddle_move(self, y) {
	self.y = self.y + y*PADDLE_SPEED;
}

func paddle_update(self, ball) {
	if aabb(self.x, self.y, PADDLE_WIDTH, PADDLE_HEIGHT, ball.x, ball.y, BALL_WIDTH, BALL_HEIGHT) {
		ball.vx = -(ball.vx * 1.1);
		ball.vy = (ball.vy * 1.1);
	}
}

func make_ball() {
	var ball = { 
		update = ball_update,
		draw = ball_draw,
		reset = ball_reset,
	};
	ball:reset(-4, -1);
	return ball;
}

func ball_reset(self, vx, vy) {
	self.x = WIDTH/2 - BALL_WIDTH/2;
	self.y = HEIGHT/2 - BALL_HEIGHT/2;
	self.vx = vx;
	self.vy = vy;
}

func ball_draw(self) {
	gfx.fill_rect(self.x, self.y, BALL_WIDTH, BALL_HEIGHT, 255, 255, 255);
}

func ball_update(self) {
	self.x = self.x + self.vx;
	self.y = self.y + self.vy;
	
	if self.y < 0 {
		self.y = 0;
		self.vy = -self.vy;
	} else if self.y+BALL_HEIGHT >= HEIGHT {
		self.y = HEIGHT - BALL_HEIGHT;
		self.vy = -self.vy;
	}
	
	if self.x < 0 {
		right_points++;
		self:reset(4, -1);
	} else if self.x >= WIDTH {
		left_points++;
		self:reset(-4, -1);
	}
}

func aabb(x0,y0,w0,h0,x1,y1,w1,h1) {
	var r0 = x0+w0;
	var r1 = x1+w1;
	var b0 = y0+h0;
	var b1 = y1+h1;
	return !(
		x1 > r0 ||
		r1 < x0 ||
		y1 > b0 ||
		b1 < y0
	);
}

func draw_points(left, score) {
	var startx = null;
	var starty = 10;
	var deltax = null;
	
	if left {
		startx = 200;
		deltax = 1;
	} else {
		deltax = -1;
		startx = WIDTH-200-score*deltax;
	}
	
	var i = 0;
	while i++ < score {
		gfx.fill_rect(startx+i*(20*deltax), starty, 15, 30, 255, 255, 255);
	}
}

func main(args) {
	gfx.init();
	gfx.create_window("Pong", WIDTH, HEIGHT, true);
	
	var left_paddle = make_paddle(true);
	var right_paddle = make_paddle(false);
	var ball = make_ball();
	
	while !gfx.should_close() {
		gfx.clear();
		
		if gfx.get_key_state(gfx.KEY_UP) {
			left_paddle:move(-1);
			right_paddle:move(-1);
		} else if gfx.get_key_state(gfx.KEY_DOWN) {
			left_paddle:move(1);
			right_paddle:move(1);
		}
		
		left_paddle:update(ball);
		right_paddle:update(ball);
		ball:update();
		
		left_paddle:draw();
		right_paddle:draw();
		ball:draw();
		
		draw_points(true, left_points);
		draw_points(false, right_points);
		
		if left_points >= SCORE_TO_WIN {
			println("Left won!");
			return;
		} else if right_points >= SCORE_TO_WIN {
			println("Right won!");
			return;
		}
		
		gfx.present();
		gfx.update();
	}
}